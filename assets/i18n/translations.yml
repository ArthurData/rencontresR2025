fr:
  title: "Tester une application Shiny"
  subtitle: "Méthodologie et outils pratiques"
  hello: "Bonjour"
  twoyearsago: "Il y a deux ans..."
  during_r_meetings: "Lors des"
  pierrot_title: "Pierrot"
  meeting_pierrot: "Rencontre de Pierrot"
  wanted_kitchen: "Il voulait refaire sa cuisine"
  shiny_for_client: "Il devait produire une application Shiny pour un client"
  revelation: "Il avait alors eu une <span class='relevant'>révélation</span>"
  importance_mockup: "L'importance d'une maquette pour :"
  kitchen_design: "La conception de sa cuisine"
  shiny_realization: "La réalisation de l'application Shiny"
  two_years_later: "2 ans après... la suite"
  swedish_store: "Suite à sa visite dans cette grande enseigne suédoise :"
  bought_everything: "Il a tout acheté : les meubles, les outils, etc..."
  mockup_validated: "La maquette est validée avec son client :"
  ready_to_dev: "Il est prêt à se lancer dans le dev"
  production_time: "Voici venu le temps de la <span class='relevant'>production</span>"
  assemble_kitchen: "Pierrot va devoir monter sa cuisine :"
  assemble_furniture: "Assembler les meubles, fixer, visser, etc..."
  be_careful: "Faire attention à ne rien casser"
  and_especially: "Et surtout :"
  quality_assurance: "S'assurer une qualité de montage suffisante pour les années à venir"
  mockup_plan: "Il y a le plan de la maquette ..."
  and_realization: "... et la réalisation"
  pierrot_fears: "Les craintes de Pierrot..."
  poorly_assembled: "Une cuisine mal montée,"
  not_robust: "Une cuisine pas robuste,"
  etc: "etc..."
  pierrot_fears_title: "Les craintes de Pierrot..."
  reassured: "Que Pierrot soit rassuré"
  seller_assures: "Le vendeur lui assure que :"
  material_tested: "<b>Le matériel est testé</b> : les vis, les placards, etc... sont soumis à des tests de charge"
  design_tool: "<b>L'outil de conception</b> montre les erreurs éventuelles"
  new_revelation: "C'est une nouvelle <span class='relevant'>révélation</span>"
  what_if_tests: "Et si Pierrot utilisait des tests pour l'application Shiny de son client ?"
  tests_allow: "Faire des tests dans son application Shiny va lui permettre de :"
  validate_progressively: "Valider progressivement son code"
  ensure_no_breaks: "S'assurer de ne rien casser en modifiant et/ou en ajoutant du code"
  increase_robustness: "Augmenter la robustesse de l'application"
  tests_in_shiny: "Les tests dans Shiny"
  unit_tests: "Les tests unitaires"
  unit_tests_subtitle: "Comment s'assurer que chaque tiroir s'ouvre <br>correctement avant de l'installer dans la cuisine..."
  test_drawer: "Tester un tiroir individuellement"
  unit_tests_description: "Comme vérifier qu'un tiroir s'ouvre et se ferme correctement, les tests unitaires dans Shiny permettent de :"
  verify_function: "Vérifier qu'une fonction retourne la bonne valeur"
  ensure_errors: "S'assurer que les erreurs sont correctement gérées"
  test_behavior: "Tester le comportement d'une fonction avec différents inputs"
  test_individually: "Pierrot va tester les différentes sorties d'une fonction, de manière indépendante des autres fonctions."
  good_news: "La bonne nouvelle"
  followed_tutorial: "Pierrot a suivi le tutoriel des <span class='relevant'>#RR25</span> de lundi matin sur {Golem} !"
  shiny_is_package: "Son application Shiny est donc un <span class='relevant'>package</span>, ce qui va faciliter la création des tests unitaires."
  create_test_structure: "Créer la structure de tests"
  create_structure_text: "Pour créer la structure de tests, Pierrot peut exécuter :"
  calculate_average_works: "calculate_average fonctionne"
  test_numeric_values: "Test avec des valeurs numériques"
  test_empty_vector: "Test avec un vecteur vide"
  test_non_numeric: "Test avec input non-numérique"
  values_must_numeric: "values doit être numérique"
  first_step: "Un premier pas"
  first_step_text: "Ici, Pierrot vient tester une fonction dans son application."
  however_not_direct: "En revanche, il ne vient pas tester directement son application, les intéractions, etc..."
  secured_business_logic: "Mais il vient de <span class='relevant'>sécuriser la logique métier derrière son application.<span>"
  integration_tests: "Les tests d'intégration"
  integration_subtitle: "Les meubles de cuisine sont testés individuellement, <br>mais comment savoir s'ils fonctionneront ensemble ?"
  assemble_furniture_together: "Assembler les meubles entre eux"
  integration_description: "Comme vérifier que la porte du frigo ne butte pas contre le mur, les tests d'intégration permettent de :"
  test_function_integration: "Tester l'emboitement des fonctions"
  ensure_modules_react: "S'assurer que les modules Shiny réagissent correctement"
  verify_reactive_flows: "Vérifier le bon fonctionnement des flux réactifs"
  integration_difference: "À la différence des tests unitaires, Pierrot va tester les interactions entre les fonctions."
  first_value: "Premiere valeur"
  second_value: "Seconde valeur"
  calculate: "Calculer !"
  second_step: "Un second pas"
  second_step_text: "Ici, Pierrot vient de tester les imbrications dans son application et notamment des interactions."
  secured_functioning: "Il vient de <span class='relevant'>sécuriser le bon fonctionnement de son application.<span>"
  tests_remain_programmatic: 'En revanche, ces tests restent "programmatique" et ils ne simulent pas un vrai navigateur/utilisateur.'
  e2e_tests: "Les tests End-to-End"
  e2e_subtitle: "Nos meubles s'assemblent bien en théorie, <br>mais comment savoir si la cuisine sera vraiment utilisable par Pierrot ?"
  cook_real_meal: "Cuisiner un vrai repas"
  e2e_description: "Comme cuisiner réellement dans la cuisine pour s'assurer que tout est fonctionnel, les tests end-to-end permettent de :"
  simulate_user_interactions: "Simuler de vraies interactions utilisateur"
  test_real_browser: "Tester l'application dans un vrai navigateur"
  verify_complete_ux: "Vérifier l'expérience utilisateur complète"
  simulate_user_browser: "Simuler un utilisateur dans un navigateur"
  use_playwright: "Pour tester l'application dans un vrai navigateur, Pierrot va utiliser la librairie JS <span class='relevant'>Playwright</span>."
  but_r_developer: "Mais Pierrot est développeur R, il va donc utiliser le nouveau package R : <code>{pw}</code>"
  pw_init: "<code>pw::pw_init()</code> pour initier la structure de tests pour Playwright"
  then_devtools: "Puis <code>devtools::test()</code> comme précédemment"
  very_fast: "Ca va très vite ... mais Playwright lance dans un navigateur l'application et simule un comportement utilisateur."
  multiple_browsers: "Fonctionne pour plusieurs navigateurs : Chromium, Firefix et Webkit."
  slow_down_trace: 'On peut ralentir les tests en mode "trace"'
  advantage_generate: "Avantage : Playwright propose de générer le code automatiquement en cliquant dans l'application"
  final_step: "Un dernier pas"
  final_step_text: "Ici, Pierrot vient de tester dans des conditions réelles son application."
  secured_complete: "Il vient de <span class='relevant'>sécuriser le bon fonctionnement de son application, tant sur la logique métier que sur la partie UI</span>."
  e2e_ci: "Les tests End-to-End fonctionnent également dans la CI pour assurer à Pierrot un continuité dans son développement."
  perfect_kitchen: "La cuisine parfaite de Pierrot"
  unit_tests_functions: "Toutes les fonctions utilitaires et métiers"
  integration_reactive_flows: "Flux réactifs principaux"
  e2e_user_journeys: "Parcours utilisateur critiques ou complexes"
  pierrot_kitchen: "La cuisine de Pierrot"
  final_result: "Le résultat final"
  thanks_to_strategy: "Grâce à sa stratégie de tests à trois niveaux :"
  delivered_robust: "Pierrot a livré une application robuste"
  client_satisfied: "Son client est satisfait"
  future_modifications: "Les modifications futures seront plus sereines"
  kitchen_functional: "Et sa cuisine est parfaitement fonctionnelle !"
  thank_you: "Merci"

en:
  title: "Testing a Shiny Application"
  subtitle: "Methodology and Practical Tools"
  hello: "Hello"
  twoyearsago: "Two years ago..."
  during_r_meetings: "During the"
  pierrot_title: "Pierrot"
  meeting_pierrot: "Meeting Pierrot"
  wanted_kitchen: "He wanted to renovate his kitchen"
  shiny_for_client: "He had to produce a Shiny application for a client"
  revelation: "He had then had a <span class='relevant'>revelation</span>"
  importance_mockup: "The importance of a mockup for:"
  kitchen_design: "Designing his kitchen"
  shiny_realization: "Building the Shiny application"
  two_years_later: "2 years later... the sequel"
  swedish_store: "Following his visit to that famous Swedish furniture store:"
  bought_everything: "He bought everything: furniture, tools, etc..."
  mockup_validated: "The mockup is validated with his client:"
  ready_to_dev: "He's ready to start development"
  production_time: "Now begins the time of <span class='relevant'>production</span>"
  assemble_kitchen: "Pierrot will have to assemble his kitchen:"
  assemble_furniture: "Assemble furniture, attach, screw, etc..."
  be_careful: "Be careful not to break anything"
  and_especially: "And most importantly:"
  quality_assurance: "Ensure sufficient build quality for years to come"
  mockup_plan: "There's the mockup plan..."
  and_realization: "... and the implementation"
  pierrot_fears: "Pierrot's fears..."
  poorly_assembled: "A poorly assembled kitchen,"
  not_robust: "A kitchen that's not robust,"
  etc: "etc..."
  pierrot_fears_title: "Pierrot's fears..."
  reassured: "Let Pierrot be reassured"
  seller_assures: "The salesperson assures him that:"
  material_tested: "<b>The material is tested</b>: screws, cabinets, etc... are subjected to load tests"
  design_tool: "<b>The design tool</b> shows potential errors"
  new_revelation: "It's a new <span class='relevant'>revelation</span>"
  what_if_tests: "What if Pierrot used tests for his client's Shiny application?"
  tests_allow: "Running tests in his Shiny application will allow him to:"
  validate_progressively: "Progressively validate his code"
  ensure_no_breaks: "Ensure nothing breaks when modifying and/or adding code"
  increase_robustness: "Increase the application's robustness"
  tests_in_shiny: "Testing in Shiny"
  unit_tests: "Unit tests"
  unit_tests_subtitle: "How to ensure each drawer opens<br> correctly before installing it in the kitchen..."
  test_drawer: "Testing a drawer individually"
  unit_tests_description: "Like checking that a drawer opens and closes properly, unit tests in Shiny allow you to:"
  verify_function: "Verify that a function returns the correct value"
  ensure_errors: "Ensure errors are handled correctly"
  test_behavior: "Test a function's behavior with different inputs"
  test_individually: "Pierrot will test the different outputs of a function, independently of other functions."
  good_news: "The good news"
  followed_tutorial: "Pierrot followed the <span class='relevant'>#RR25</span> Monday morning tutorial on {Golem}!"
  shiny_is_package: "His Shiny application is therefore a <span class='relevant'>package</span>, which will facilitate the creation of unit tests."
  create_test_structure: "Creating the test structure"
  create_structure_text: "To create the test structure, Pierrot can run:"
  calculate_average_works: "calculate_average works"
  test_numeric_values: "Test with numeric values"
  test_empty_vector: "Test with empty vector"
  test_non_numeric: "Test with non-numeric input"
  values_must_numeric: "values must be numeric"
  first_step: "A first step"
  first_step_text: "Here, Pierrot just tested a function in his application."
  however_not_direct: "However, he doesn't directly test his application, interactions, etc..."
  secured_business_logic: "But he just <span class='relevant'>secured the business logic behind his application.</span>"
  integration_tests: "Integration tests"
  integration_subtitle: "Kitchen furniture is tested individually, <br>but how do we know if they'll work together?"
  assemble_furniture_together: "Assembling furniture together"
  integration_description: "Like checking that the fridge door doesn't hit the wall, integration tests allow you to:"
  test_function_integration: "Test function integration"
  ensure_modules_react: "Ensure Shiny modules react correctly"
  verify_reactive_flows: "Verify proper functioning of reactive flows"
  integration_difference: "Unlike unit tests, Pierrot will test interactions between functions."
  first_value: "First value"
  second_value: "Second value"
  calculate: "Calculate!"
  second_step: "A second step"
  second_step_text: "Here, Pierrot just tested the integrations in his application, particularly interactions."
  secured_functioning: "He just <span class='relevant'>secured the proper functioning of his application.</span>"
  tests_remain_programmatic: 'However, these tests remain "programmatic" and they don''t simulate a real browser/user.'
  e2e_tests: "End-to-End tests"
  e2e_subtitle: "Our furniture assembles well in theory, <br>but how do we know if the kitchen will really be usable by Pierrot?"
  cook_real_meal: "Cooking a real meal"
  e2e_description: "Like actually cooking in the kitchen to ensure everything is functional, end-to-end tests allow you to:"
  simulate_user_interactions: "Simulate real user interactions"
  test_real_browser: "Test the application in a real browser"
  verify_complete_ux: "Verify the complete user experience"
  simulate_user_browser: "Simulating a user in a browser"
  use_playwright: "To test the application in a real browser, Pierrot will use the JS library <span class='relevant'>Playwright</span>."
  but_r_developer: "But Pierrot is an R developer, so he'll use the new R package: <code>{pw}</code>"
  pw_init: "<code>pw::pw_init()</code> to initiate the test structure for Playwright"
  then_devtools: "Then <code>devtools::test()</code> as before"
  very_fast: "It goes very fast... but Playwright launches the application in a browser and simulates user behavior."
  multiple_browsers: "Works for multiple browsers: Chromium, Firefox and Webkit."
  slow_down_trace: 'We can slow down tests in "trace" mode'
  advantage_generate: "Advantage: Playwright offers to generate the code automatically by clicking in the application"
  final_step: "A final step"
  final_step_text: "Here, Pierrot just tested his application under real conditions."
  secured_complete: "He just <span class='relevant'>secured the proper functioning of his application, both on the business logic and UI parts</span>."
  e2e_ci: "End-to-End tests also work in CI to ensure Pierrot continuity in his development."
  perfect_kitchen: "Pierrot's perfect kitchen"
  unit_tests_functions: "All utility and business functions"
  integration_reactive_flows: "Main reactive flows"
  e2e_user_journeys: "Critical or complex user journeys"
  pierrot_kitchen: "Pierrot's kitchen"
  final_result: "The final result"
  thanks_to_strategy: "Thanks to his three-level testing strategy:"
  delivered_robust: "Pierrot delivered a robust application"
  client_satisfied: "His client is satisfied"
  future_modifications: "Future modifications will be more serene"
  kitchen_functional: "And his kitchen is perfectly functional!"
  thank_you: "Thank you"
