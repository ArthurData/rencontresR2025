{
  "hash": "73cd462c613284971e83fdc496d14dee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tester une application Shiny\"\nsubtitle: MÃ©thodologie et outils pratiques\nformat: \n  thinkridentity-revealjs:\n    theme: custom.scss\n    slideNumber: false\nchalkboard: false\nauthor: <a href=\"https://arthurdata.github.io/rencontresR2025\" target=\"_blank\">ğŸ”— arthurdata.github.io/rencontresR2025</a>\ninclude-before-body: assets/ground.html\ndate: last-modified\n---\n\n\n\n# Bonjour\n\n# Il y a deux ans...\n\nLors des <a href=\"https://www.youtube.com/watch?v=iWD_cLdmLUI&t=81s\" target=\"_blank\">ğŸ”— Rencontres R 2023...</a>\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {.fragment .fade-right}\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n:::\n:::\n\n::: {.column width=\"55%\"}\n::: {.fragment .fade-left}\n### Rencontre de Pierrot\n:::\n\n::: {.fragment .fade-left}\nIl voulait refaire sa cuisine\n:::\n\n::: {.fragment .fade-left}\nIl devait produire une application Shiny pour un client\n:::\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n### Il avait alors eu une <span class=\"relevant\">rÃ©vÃ©lation</span>\n\n::: {.fragment .fade-left}\nL'importance d'une maquette pour : \n\n- La conception de sa cuisine\n- La rÃ©alisation de l'application Shiny\n:::\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n### 2 ans aprÃ¨s... la suite\n\n::: {.fragment .fade-left}\nSuite Ã  sa visite dans cette grande enseigne suÃ©doise :\n\n- Il a tout achetÃ© : les meubles, les outils, _etc..._\n:::\n\n::: {.fragment .fade-left}\nLa maquette est validÃ©e avec son client :\n\n- Il est prÃªt Ã  se lancer dans le dev\n:::\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n### Voici venu le temps de la <span class=\"relevant\">production</span>\n\n::: {.fragment .fade-left}\nPierrot va devoir monter sa cuisine :\n\n- Assembler les meubles, fixer, visser, _etc..._\n- Faire attention Ã  ne rien casser\n:::\n\n::: {.fragment .fade-left}\nEt surtout :\n:::\n\n::: {.fragment .fade-left}\nS'assurer une qualitÃ© de montage suffisante pour les annÃ©es Ã  venir\n:::\n:::\n::::\n\n# Il y a le plan de la maquette ...\n\n# ... et la rÃ©alisation\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"25%\"}\n:::\n\n::: {.column width=\"75%\"}\n### Les craintes de Pierrot...\n\n- Une cuisine mal montÃ©e,\n- Une cuisine pas robuste,\n- _etc..._\n:::\n::::\n\n## Les craintes de Pierrot... \n\n::: {.r-stack}\n![](assets/failed1.webp){.fragment width=\"650\" height=\"600\"}\n\n![](assets/failed2.webp){.fragment width=\"650\" height=\"600\"}\n\n![](assets/failed3.webp){.fragment width=\"650\" height=\"600\"}\n:::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"25%\"}\n:::\n\n::: {.column width=\"75%\"}\n### Que Pierrot soit rassurÃ©\n\nLe vendeur lui assure que  :\n\n- **Le matÃ©riel est testÃ©** : les vis, les placards, _etc..._ sont soumis Ã  des tests de charge\n\n- **L'outil de conception** montre les erreurs Ã©ventuelles\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n### C'est une nouvelle <span class=\"relevant\">rÃ©vÃ©lation</span>\n\n::: {.fragment .fade-left}\nEt si Pierrot utilisait des tests pour l'application Shiny de son client ?\n:::\n\n::: {.fragment .fade-left}\nFaire des tests dans son application Shiny va lui permettre de : \n\n- Valider progressivement son code\n\n- S'assurer de ne rien casser en modifiant et/ou en ajoutant du code\n\n- Augmenter la robustesse de l'application\n:::\n\n:::\n::::\n\n# Les tests dans Shiny\n\n# Les tests unitaires\n\n_Comment s'assurer que chaque tiroir s'ouvre <br> correctement avant de l'installer dans la cuisine..._\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/unit_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Tester un tiroir individuellement\n\nComme vÃ©rifier qu'un tiroir s'ouvre et se ferme correctement, les tests unitaires dans Shiny permettent de :\n\n::: {.fragment .fade-left}\n- VÃ©rifier qu'une fonction retourne la bonne valeur\n- S'assurer que les erreurs sont correctement gÃ©rÃ©es\n- Tester le comportement d'une fonction avec diffÃ©rents inputs\n:::\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/testunitaire.png)\n:::\n\n::: {.column width=\"55%\"}\n### Tester un tiroir individuellement\n\nPierrot va tester les diffÃ©rentes sorties dâ€™une fonction, de maniÃ¨re indÃ©pendante des autres fonctions.\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/testunitaire.png)\n:::\n\n::: {.column width=\"55%\"}\n### La bonne nouvelle\n\nPierrot a suivi le tutoriel des <span class=\"relevant\">#RR25</span> de lundi matin sur `{Golem}` ! \n\nSon application Shiny est donc un <span class=\"relevant\">package</span>, ce qui va faciliter la crÃ©ation des tests unitaires.\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```\nmyShinyApp/\nâ”œâ”€â”€ DESCRIPTION\nâ”œâ”€â”€ NAMESPACE\nâ”œâ”€â”€ app.R\nâ”œâ”€â”€ R/\nâ”‚   â”œâ”€â”€ app_ui.R\nâ”‚   â”œâ”€â”€ app_server.R\nâ”‚   â””â”€â”€ run_app.R\nâ”œâ”€â”€ tests/\nâ”‚   â”œâ”€â”€ testthat/\nâ”‚   â”‚   â”œâ”€â”€ test-calculate_average.R\nâ”‚   â”‚   â”œâ”€â”€ test-golem-recommended.R\nâ”‚   â”‚   â””â”€â”€ ...\nâ”‚   â””â”€â”€ testthat.R\n```\n:::\n\n::: {.column width=\"55%\"}\n### CrÃ©er la structure de tests\n\nPour crÃ©er la structure de tests, Pierrot peut exÃ©cuter : \n\n- `golem::use_recommended_tests()`\n\n- `usethis::use_test(\"calculate_average\")`\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_average <- function(values) {\n  if (!is.numeric(values)) {\n    stop(\"values doit Ãªtre numÃ©rique\")\n  }\n  if (length(values) == 0) {\n    return(0)\n  }\n  sum(values) / length(values)\n}\n```\n:::\n\n\n:::\n\n::: {.column width=\"55%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"calculate_average fonctionne\", {\n  # Test avec des valeurs numÃ©riques\n  expect_equal(\n    object = calculate_average(c(10, 20, 30)), \n    expected = 20\n  )\n  \n  # Test avec un vecteur vide\n  expect_equal(\n    object = calculate_average(0), \n    expected = 0\n  )\n  \n  # Test avec input non-numÃ©rique\n  expect_error(\n    object = calculate_average(c(\"a\", \"b\")), \n    \"values doit Ãªtre numÃ©rique\"\n  )\n})\n```\n:::\n\n\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Un premier pas\n\nIci, Pierrot vient tester une fonction dans son application. \n\n::: {.fragment .fade-left}\nEn revanche, il ne vient pas tester directement son application, les intÃ©ractions, _etc..._\n:::\n\n::: {.fragment .fade-left}\nMais il vient de <span class=\"relevant\">sÃ©curiser la logique mÃ©tier derriÃ¨re son application</span>. \n:::\n:::\n::::\n\n# Les tests d'intÃ©gration\n\n_Les meubles de cuisine sont testÃ©s individuellement, <br> mais comment savoir s'ils fonctionneront ensemble ?_\n\n## Les tests d'intÃ©gration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/inte_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Assembler les meubles entre eux\n\nComme vÃ©rifier que la porte du frigo ne butte pas contre le mur, les tests d'intÃ©gration permettent de :\n\n::: {.fragment .fade-left}\n- Tester l'emboitement des fonctions\n\n- S'assurer que les modules Shiny rÃ©agissent correctement\n\n- VÃ©rifier le bon fonctionnement des flux rÃ©actifs\n:::\n:::\n::::\n\n## Les tests d'intÃ©gration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\\ \n\n\\ \n\n![](assets/test_usage.png)\n:::\n\n::: {.column width=\"55%\"}\n### Assembler les meubles entre eux\n\nÃ€ la diffÃ©rence des tests unitaires, Pierrot va tester les interactions entre les fonctions.\n:::\n::::\n\n## Les tests d'intÃ©gration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp_ui <- function(request) {\n  fluidPage(\n    numericInput(\n      inputId = \"num1\",\n      label = \"Premiere valeur\",\n      value = 10\n    ),\n    numericInput(\n      inputId = \"num2\",\n      label = \"Seconde valeur\",\n      value = 10\n    ),\n    ...\n    actionButton(\n      inputId = \"go\",\n      label = \"Calculer !\"\n    )\n  )\n}\n```\n:::\n\n\n:::\n\n::: {.column width=\"55%\"}\n![](assets/app_inte.png){width=80%}\n:::\n::::\n\n## Les tests d'intÃ©gration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp_ui <- function(request) {\n  fluidPage(\n    numericInput(\n      inputId = \"num1\",\n      label = \"Premiere valeur\",\n      value = 10\n    ),\n    numericInput(\n      inputId = \"num2\",\n      label = \"Seconde valeur\",\n      value = 10\n    ),\n    ...\n    actionButton(\n      inputId = \"go\",\n      label = \"Calculer !\"\n    )\n  )\n}\n```\n:::\n\n\n:::\n\n::: {.column width=\"55%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp_server <- function(input, output, session) {\n\n  rv <- reactiveValues()\n\n  observeEvent(input$go, {\n    rv$avg <- calculate_average(\n      values = c(\n        input$num1,\n        input$num2,\n        input$num3,\n        input$num4\n      )\n    )\n  })\n}\n```\n:::\n\n\n:::\n::::\n\n\n## Les tests d'intÃ©gration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntestServer(app_server, {\n  session$setInputs(num1 = 5)\n  session$setInputs(num2 = 5)\n  session$setInputs(num3 = 5)\n  session$setInputs(num4 = 5)\n  session$setInputs(go = 1)\n\n  expect_equal(\n    object = rv$avg, \n    expected = 5\n  )\n\n  session$setInputs(num1 = 10)\n  session$setInputs(num2 = 20)\n  session$setInputs(num3 = 30)\n  session$setInputs(num4 = 12)\n  session$setInputs(go = 2)\n\n  expect_equal(\n    object = rv$avg,\n    expected = 18\n  )\n})\n```\n:::\n\n\n:::\n\n::: {.column width=\"55%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp_server <- function(input, output, session) {\n\n  rv <- reactiveValues()\n\n  observeEvent(input$go, {\n    rv$avg <- calculate_average(\n      values = c(\n        input$num1,\n        input$num2,\n        input$num3,\n        input$num4\n      )\n    )\n  })\n}\n```\n:::\n\n\n:::\n::::\n\n## Les tests d'intÃ©gration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests2.png)\n:::\n\n::: {.column width=\"55%\"}\n### Un second pas\n\nIci, Pierrot vient de tester les imbrications dans son application et notamment des interactions.\n\n::: {.fragment .fade-left}\nIl vient de <span class=\"relevant\">sÃ©curiser le bon fonctionnement de son application</span>.\n:::\n\n::: {.fragment .fade-left}\nEn revanche, ces tests restent \"_programmatique_\" et ils ne simulent pas un vrai navigateur/utilisateur.\n:::\n:::\n::::\n\n# Les tests End-to-End\n\n_Nos meubles s'assemblent bien en thÃ©orie, <br>mais comment savoir si la cuisine sera vraiment utilisable par Pierrot ?_\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Cuisiner un vrai repas\n\nComme cuisiner rÃ©ellement dans la cuisine pour s'assurer que tout est fonctionnel, les tests end-to-end permettent de :\n\n::: {.fragment .fade-left}\n- Simuler de vraies interactions utilisateur\n\n- Tester l'application dans un vrai navigateur\n\n- VÃ©rifier l'expÃ©rience utilisateur complÃ¨te\n:::\n:::\n::::\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Simuler un utilisateur dans un navigateur\n\nPour tester l'application dans un vrai navigateur, Pierrot va utiliser la librairie JS <span class=\"relevant\">Playwright</span>.\n\n::: {.fragment .fade-left}\nMais Pierrot est dÃ©veloppeur R, il va donc utiliser le nouveau package R : `{pw}`\n\n<a href=\"https://github.com/ThinkR-open/pw\" target=\"_blank\">ğŸ”— github.com/ThinkR-open/pw</a>\n:::\n:::\n::::\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"65%\"}\n![](assets/signature-r.png)\n:::\n\n::: {.column width=\"35%\"}\n### Simuler un utilisateur dans un navigateur \n\n<a href=\"https://connect.thinkr.fr/signature-r/\" target=\"_blank\">ğŸ”— connect.thinkr.fr/signature-r/</a>\n\n::: {.fragment .fade-left}\n`pw::pw_init()` pour initier la structure de tests pour <span class=\"relevant\">Playwright</span>\n\nPuis `devtools::test()` comme prÃ©cÃ©demment\n:::\n:::\n::::\n\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n![](assets/tests_e2e.gif)\n:::\n\n::: {.column width=\"30%\"}\n### Simuler un utilisateur dans un navigateur\n\nCa va trÃ¨s vite ... mais Playwright lance dans un navigateur l'application et simule un comportement utilisateur.\n\nFonctionne pour plusieurs navigateurs : Chromium, Firefix et Webkit.\n:::\n::::\n\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n![](assets/tests_e2e-2.gif)\n:::\n\n::: {.column width=\"30%\"}\n### Simuler un utilisateur dans un navigateur\n\nOn peut ralentir les tests en mode \"_trace_\"\n:::\n::::\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n\n\n::: {.cell}\n\n```{.js .cell-code}\nimport { test, expect } from '@playwright/test';\n\ntest('Fill signature is working', async ({ page }) => {\n  await page.goto('http://localhost:3000/');\n  await expect(page.getByTestId(\"appName\")).toBeVisible();\n\n  await expect(page.getByTestId('firstname')).toBeVisible();\n  await expect(page.getByPlaceholder('John')).toBeEmpty();\n  await page.getByPlaceholder('John').click();\n  await page.getByPlaceholder('John').fill('Arthur');\n  await expect(page.getByTestId('signature-names')).toMatchAriaSnapshot(`- 'cell \"Arthur {{lastname}}\"'`);\n\n  await page.getByPlaceholder('Doe').fill('BrÃ©ant');\n  await expect(page.getByTestId('signature-names')).toMatchAriaSnapshot(`- 'cell \"Arthur BrÃ©ant\"'`);\n\n  await page.getByRole('button', { name: 'copy fa-solid icon Copy to' }).click();\n  await expect(page.getByText('Ã—Paste the signature in your')).toBeVisible();\n});\n```\n:::\n\n\n:::\n\n::: {.column width=\"30%\"}\n### Simuler un utilisateur dans un navigateur\n\nAvantage : Playwright propose de gÃ©nÃ©rer le code automatiquement en cliquant dans l'application\n:::\n::::\n\n## Les tests End-to-End\n\n![](assets/e2e_generator.gif){width=\"100%\"}\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests3.png)\n:::\n\n::: {.column width=\"55%\"}\n### Un dernier pas\n\nIci, Pierrot vient de tester dans des conditions rÃ©elles son application.\n\n::: {.fragment .fade-left}\nIl vient de <span class=\"relevant\">sÃ©curiser le bon fonctionnement de son application, tant sur la logique mÃ©tier que sur la partie UI</span>.\n:::\n\n::: {.fragment .fade-left}\nLes tests End-to-End fonctionnent Ã©galement dans la CI pour assurer Ã  Pierrot un continuitÃ© dans son dÃ©veloppement.\n:::\n:::\n::::\n\n## Les tests dans Shiny\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### La cuisine parfaite de Pierrot\n\n\n::: {.fragment .fade-left}\n**Tests unitaires**\n\n- Toutes les fonctions utilitaires et mÃ©tiers\n:::\n\n::: {.fragment .fade-left}\n**Tests d'intÃ©gration**\n\n- Flux rÃ©actifs principaux\n:::\n\n::: {.fragment .fade-left}\n**Tests end-to-end**\n\n- Parcours utilisateur critiques ou complexes\n:::\n:::\n::::\n\n## La cuisine de Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {.fragment .fade-right}\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n:::\n:::\n\n::: {.column width=\"55%\"}\n::: {.fragment .fade-left}\n### Le rÃ©sultat final\n\nGrÃ¢ce Ã  sa stratÃ©gie de tests Ã  trois niveaux :\n:::\n\n::: {.fragment .fade-left}\n- Pierrot a livrÃ© une application robuste\n\n- Son client est satisfait\n\n- Les modifications futures seront plus sereines\n:::\n\n::: {.fragment .fade-left}\nEt sa cuisine est parfaitement fonctionnelle !\n:::\n:::\n::::\n\n## La cuisine de Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n### Merci\n\n<a href=\"https://arthurdata.github.io/rencontresR2025\" target=\"_blank\">ğŸ”— arthurdata.github.io/rencontresR2025</a>\n:::\n::::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}