{
  "hash": "8dd8cbf4f28af2087c9fce69ed0da786",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: <span data-i18n-key=\"title\"></span>\nsubtitle: <span data-i18n-key=\"subtitle\"></span>\nformat: \n  thinkridentity-revealjs:\n    footer: |\n      {{< i18n-select choices=\"fr:Français, en:English\" selected=\"fr\" >}}\n    theme: custom.scss\n    slideNumber: false\n    i18n:\n      defaultLocale: \"fr\"\n      fr:\n        title: \"Tester une application Shiny\"\n        subtitle: \"Méthodologie et outils pratiques\"\n        hello: \"Bonjour\"\n        twoyearsago: \"Il y a deux ans...\"\n        during_r_meetings: \"Lors des\"\n        pierrot_title: \"Pierrot\"\n        meeting_pierrot: \"Rencontre de Pierrot\"\n        wanted_kitchen: \"Il voulait refaire sa cuisine\"\n        shiny_for_client: \"Il devait produire une application Shiny pour un client\"\n        revelation: \"Il avait alors eu une <span class='relevant'>révélation</span>\"\n        importance_mockup: \"L'importance d'une maquette pour :\"\n        kitchen_design: \"La conception de sa cuisine\"\n        shiny_realization: \"La réalisation de l'application Shiny\"\n        two_years_later: \"2 ans après... la suite\"\n        swedish_store: \"Suite à sa visite dans cette grande enseigne suédoise :\"\n        bought_everything: \"Il a tout acheté : les meubles, les outils, etc...\"\n        mockup_validated: \"La maquette est validée avec son client :\"\n        ready_to_dev: \"Il est prêt à se lancer dans le dev\"\n        production_time: \"Voici venu le temps de la <span class='relevant'>production</span>\"\n        assemble_kitchen: \"Pierrot va devoir monter sa cuisine :\"\n        assemble_furniture: \"Assembler les meubles, fixer, visser, etc...\"\n        be_careful: \"Faire attention à ne rien casser\"\n        and_especially: \"Et surtout :\"\n        quality_assurance: \"S'assurer une qualité de montage suffisante pour les années à venir\"\n        mockup_plan: \"Il y a le plan de la maquette ...\"\n        and_realization: \"... et la réalisation\"\n        pierrot_fears: \"Les craintes de Pierrot...\"\n        poorly_assembled: \"Une cuisine mal montée,\"\n        not_robust: \"Une cuisine pas robuste,\"\n        etc: \"etc...\"\n        pierrot_fears_title: \"Les craintes de Pierrot...\"\n        reassured: \"Que Pierrot soit rassuré\"\n        seller_assures: \"Le vendeur lui assure que :\"\n        material_tested: \"<b>Le matériel est testé</b> : les vis, les placards, etc... sont soumis à des tests de charge\"\n        design_tool: \"<b>L'outil de conception</b> montre les erreurs éventuelles\"\n        new_revelation: \"C'est une nouvelle <span class='relevant'>révélation</span>\"\n        what_if_tests: \"Et si Pierrot utilisait des tests pour l'application Shiny de son client ?\"\n        tests_allow: \"Faire des tests dans son application Shiny va lui permettre de :\"\n        validate_progressively: \"Valider progressivement son code\"\n        ensure_no_breaks: \"S'assurer de ne rien casser en modifiant et/ou en ajoutant du code\"\n        increase_robustness: \"Augmenter la robustesse de l'application\"\n        tests_in_shiny: \"Les tests dans Shiny\"\n        unit_tests: \"Les tests unitaires\"\n        unit_tests_subtitle: \"Comment s'assurer que chaque tiroir s'ouvre <br>correctement avant de l'installer dans la cuisine...\"\n        test_drawer: \"Tester un tiroir individuellement\"\n        unit_tests_description: \"Comme vérifier qu'un tiroir s'ouvre et se ferme correctement, les tests unitaires dans Shiny permettent de :\"\n        verify_function: \"Vérifier qu'une fonction retourne la bonne valeur\"\n        ensure_errors: \"S'assurer que les erreurs sont correctement gérées\"\n        test_behavior: \"Tester le comportement d'une fonction avec différents inputs\"\n        test_individually: \"Pierrot va tester les différentes sorties d'une fonction, de manière indépendante des autres fonctions.\"\n        good_news: \"La bonne nouvelle\"\n        followed_tutorial: \"Pierrot a suivi le tutoriel des <span class='relevant'>#RR25</span> de lundi matin sur {Golem} !\"\n        shiny_is_package: \"Son application Shiny est donc un <span class='relevant'>package</span>, ce qui va faciliter la création des tests unitaires.\"\n        create_test_structure: \"Créer la structure de tests\"\n        create_structure_text: \"Pour créer la structure de tests, Pierrot peut exécuter :\"\n        calculate_average_works: \"calculate_average fonctionne\"\n        test_numeric_values: \"Test avec des valeurs numériques\"\n        test_empty_vector: \"Test avec un vecteur vide\"\n        test_non_numeric: \"Test avec input non-numérique\"\n        values_must_numeric: \"values doit être numérique\"\n        first_step: \"Un premier pas\"\n        first_step_text: \"Ici, Pierrot vient tester une fonction dans son application.\"\n        however_not_direct: \"En revanche, il ne vient pas tester directement son application, les intéractions, etc...\"\n        secured_business_logic: \"Mais il vient de <span class='relevant'>sécuriser la logique métier derrière son application.<span>\"\n        integration_tests: \"Les tests d'intégration\"\n        integration_subtitle: \"Les meubles de cuisine sont testés individuellement, <br>mais comment savoir s'ils fonctionneront ensemble ?\"\n        assemble_furniture_together: \"Assembler les meubles entre eux\"\n        integration_description: \"Comme vérifier que la porte du frigo ne butte pas contre le mur, les tests d'intégration permettent de :\"\n        test_function_integration: \"Tester l'emboitement des fonctions\"\n        ensure_modules_react: \"S'assurer que les modules Shiny réagissent correctement\"\n        verify_reactive_flows: \"Vérifier le bon fonctionnement des flux réactifs\"\n        integration_difference: \"À la différence des tests unitaires, Pierrot va tester les interactions entre les fonctions.\"\n        first_value: \"Premiere valeur\"\n        second_value: \"Seconde valeur\"\n        calculate: \"Calculer !\"\n        second_step: \"Un second pas\"\n        second_step_text: \"Ici, Pierrot vient de tester les imbrications dans son application et notamment des interactions.\"\n        secured_functioning: \"Il vient de <span class='relevant'>sécuriser le bon fonctionnement de son application.<span>\"\n        tests_remain_programmatic: 'En revanche, ces tests restent \"programmatique\" et ils ne simulent pas un vrai navigateur/utilisateur.'\n        e2e_tests: \"Les tests End-to-End\"\n        e2e_subtitle: \"Nos meubles s'assemblent bien en théorie, <br>mais comment savoir si la cuisine sera vraiment utilisable par Pierrot ?\"\n        cook_real_meal: \"Cuisiner un vrai repas\"\n        e2e_description: \"Comme cuisiner réellement dans la cuisine pour s'assurer que tout est fonctionnel, les tests end-to-end permettent de :\"\n        simulate_user_interactions: \"Simuler de vraies interactions utilisateur\"\n        test_real_browser: \"Tester l'application dans un vrai navigateur\"\n        verify_complete_ux: \"Vérifier l'expérience utilisateur complète\"\n        simulate_user_browser: \"Simuler un utilisateur dans un navigateur\"\n        use_playwright: \"Pour tester l'application dans un vrai navigateur, Pierrot va utiliser la librairie JS <span class='relevant'>Playwright</span>.\"\n        but_r_developer: \"Mais Pierrot est développeur R, il va donc utiliser le nouveau package R : <code>{pw}</code>\"\n        pw_init: \"<code>pw::pw_init()</code> pour initier la structure de tests pour Playwright\"\n        then_devtools: \"Puis <code>devtools::test()</code> comme précédemment\"\n        very_fast: \"Ca va très vite ... mais Playwright lance dans un navigateur l'application et simule un comportement utilisateur.\"\n        multiple_browsers: \"Fonctionne pour plusieurs navigateurs : Chromium, Firefix et Webkit.\"\n        slow_down_trace: 'On peut ralentir les tests en mode \"trace\"'\n        advantage_generate: \"Avantage : Playwright propose de générer le code automatiquement en cliquant dans l'application\"\n        final_step: \"Un dernier pas\"\n        final_step_text: \"Ici, Pierrot vient de tester dans des conditions réelles son application.\"\n        secured_complete: \"Il vient de <span class='relevant'>sécuriser le bon fonctionnement de son application, tant sur la logique métier que sur la partie UI</span>.\"\n        e2e_ci: \"Les tests End-to-End fonctionnent également dans la CI pour assurer à Pierrot un continuité dans son développement.\"\n        perfect_kitchen: \"La cuisine parfaite de Pierrot\"\n        unit_tests_functions: \"Toutes les fonctions utilitaires et métiers\"\n        integration_reactive_flows: \"Flux réactifs principaux\"\n        e2e_user_journeys: \"Parcours utilisateur critiques ou complexes\"\n        pierrot_kitchen: \"La cuisine de Pierrot\"\n        final_result: \"Le résultat final\"\n        thanks_to_strategy: \"Grâce à sa stratégie de tests à trois niveaux :\"\n        delivered_robust: \"Pierrot a livré une application robuste\"\n        client_satisfied: \"Son client est satisfait\"\n        future_modifications: \"Les modifications futures seront plus sereines\"\n        kitchen_functional: \"Et sa cuisine est parfaitement fonctionnelle !\"\n        thank_you: \"Merci\"\n      en:\n        title: \"Testing a Shiny Application\"\n        subtitle: \"Methodology and Practical Tools\"\n        hello: \"Hello\"\n        twoyearsago: \"Two years ago...\"\n        during_r_meetings: \"During the\"\n        pierrot_title: \"Pierrot\"\n        meeting_pierrot: \"Meeting Pierrot\"\n        wanted_kitchen: \"He wanted to renovate his kitchen\"\n        shiny_for_client: \"He had to produce a Shiny application for a client\"\n        revelation: \"He had then had a <span class='relevant'>revelation</span>\"\n        importance_mockup: \"The importance of a mockup for:\"\n        kitchen_design: \"Designing his kitchen\"\n        shiny_realization: \"Building the Shiny application\"\n        two_years_later: \"2 years later... the sequel\"\n        swedish_store: \"Following his visit to that famous Swedish furniture store:\"\n        bought_everything: \"He bought everything: furniture, tools, etc...\"\n        mockup_validated: \"The mockup is validated with his client:\"\n        ready_to_dev: \"He's ready to start development\"\n        production_time: \"Now begins the time of <span class='relevant'>production</span>\"\n        assemble_kitchen: \"Pierrot will have to assemble his kitchen:\"\n        assemble_furniture: \"Assemble furniture, attach, screw, etc...\"\n        be_careful: \"Be careful not to break anything\"\n        and_especially: \"And most importantly:\"\n        quality_assurance: \"Ensure sufficient build quality for years to come\"\n        mockup_plan: \"There's the mockup plan...\"\n        and_realization: \"... and the implementation\"\n        pierrot_fears: \"Pierrot's fears...\"\n        poorly_assembled: \"A poorly assembled kitchen,\"\n        not_robust: \"A kitchen that's not robust,\"\n        etc: \"etc...\"\n        pierrot_fears_title: \"Pierrot's fears...\"\n        reassured: \"Let Pierrot be reassured\"\n        seller_assures: \"The salesperson assures him that:\"\n        material_tested: \"<b>The material is tested</b>: screws, cabinets, etc... are subjected to load tests\"\n        design_tool: \"<b>The design tool</b> shows potential errors\"\n        new_revelation: \"It's a new <span class='relevant'>revelation</span>\"\n        what_if_tests: \"What if Pierrot used tests for his client's Shiny application?\"\n        tests_allow: \"Running tests in his Shiny application will allow him to:\"\n        validate_progressively: \"Progressively validate his code\"\n        ensure_no_breaks: \"Ensure nothing breaks when modifying and/or adding code\"\n        increase_robustness: \"Increase the application's robustness\"\n        tests_in_shiny: \"Testing in Shiny\"\n        unit_tests: \"Unit tests\"\n        unit_tests_subtitle: \"How to ensure each drawer opens<br> correctly before installing it in the kitchen...\"\n        test_drawer: \"Testing a drawer individually\"\n        unit_tests_description: \"Like checking that a drawer opens and closes properly, unit tests in Shiny allow you to:\"\n        verify_function: \"Verify that a function returns the correct value\"\n        ensure_errors: \"Ensure errors are handled correctly\"\n        test_behavior: \"Test a function's behavior with different inputs\"\n        test_individually: \"Pierrot will test the different outputs of a function, independently of other functions.\"\n        good_news: \"The good news\"\n        followed_tutorial: \"Pierrot followed the <span class='relevant'>#RR25</span> Monday morning tutorial on {Golem}!\"\n        shiny_is_package: \"His Shiny application is therefore a <span class='relevant'>package</span>, which will facilitate the creation of unit tests.\"\n        create_test_structure: \"Creating the test structure\"\n        create_structure_text: \"To create the test structure, Pierrot can run:\"\n        calculate_average_works: \"calculate_average works\"\n        test_numeric_values: \"Test with numeric values\"\n        test_empty_vector: \"Test with empty vector\"\n        test_non_numeric: \"Test with non-numeric input\"\n        values_must_numeric: \"values must be numeric\"\n        first_step: \"A first step\"\n        first_step_text: \"Here, Pierrot just tested a function in his application.\"\n        however_not_direct: \"However, he doesn't directly test his application, interactions, etc...\"\n        secured_business_logic: \"But he just <span class='relevant'>secured the business logic behind his application.</span>\"\n        integration_tests: \"Integration tests\"\n        integration_subtitle: \"Kitchen furniture is tested individually, <br>but how do we know if they'll work together?\"\n        assemble_furniture_together: \"Assembling furniture together\"\n        integration_description: \"Like checking that the fridge door doesn't hit the wall, integration tests allow you to:\"\n        test_function_integration: \"Test function integration\"\n        ensure_modules_react: \"Ensure Shiny modules react correctly\"\n        verify_reactive_flows: \"Verify proper functioning of reactive flows\"\n        integration_difference: \"Unlike unit tests, Pierrot will test interactions between functions.\"\n        first_value: \"First value\"\n        second_value: \"Second value\"\n        calculate: \"Calculate!\"\n        second_step: \"A second step\"\n        second_step_text: \"Here, Pierrot just tested the integrations in his application, particularly interactions.\"\n        secured_functioning: \"He just <span class='relevant'>secured the proper functioning of his application.</span>\"\n        tests_remain_programmatic: 'However, these tests remain \"programmatic\" and they don''t simulate a real browser/user.'\n        e2e_tests: \"End-to-End tests\"\n        e2e_subtitle: \"Our furniture assembles well in theory, <br>but how do we know if the kitchen will really be usable by Pierrot?\"\n        cook_real_meal: \"Cooking a real meal\"\n        e2e_description: \"Like actually cooking in the kitchen to ensure everything is functional, end-to-end tests allow you to:\"\n        simulate_user_interactions: \"Simulate real user interactions\"\n        test_real_browser: \"Test the application in a real browser\"\n        verify_complete_ux: \"Verify the complete user experience\"\n        simulate_user_browser: \"Simulating a user in a browser\"\n        use_playwright: \"To test the application in a real browser, Pierrot will use the JS library <span class='relevant'>Playwright</span>.\"\n        but_r_developer: \"But Pierrot is an R developer, so he'll use the new R package: <code>{pw}</code>\"\n        pw_init: \"<code>pw::pw_init()</code> to initiate the test structure for Playwright\"\n        then_devtools: \"Then <code>devtools::test()</code> as before\"\n        very_fast: \"It goes very fast... but Playwright launches the application in a browser and simulates user behavior.\"\n        multiple_browsers: \"Works for multiple browsers: Chromium, Firefox and Webkit.\"\n        slow_down_trace: 'We can slow down tests in \"trace\" mode'\n        advantage_generate: \"Advantage: Playwright offers to generate the code automatically by clicking in the application\"\n        final_step: \"A final step\"\n        final_step_text: \"Here, Pierrot just tested his application under real conditions.\"\n        secured_complete: \"He just <span class='relevant'>secured the proper functioning of his application, both on the business logic and UI parts</span>.\"\n        e2e_ci: \"End-to-End tests also work in CI to ensure Pierrot continuity in his development.\"\n        perfect_kitchen: \"Pierrot's perfect kitchen\"\n        unit_tests_functions: \"All utility and business functions\"\n        integration_reactive_flows: \"Main reactive flows\"\n        e2e_user_journeys: \"Critical or complex user journeys\"\n        pierrot_kitchen: \"Pierrot's kitchen\"\n        final_result: \"The final result\"\n        thanks_to_strategy: \"Thanks to his three-level testing strategy:\"\n        delivered_robust: \"Pierrot delivered a robust application\"\n        client_satisfied: \"His client is satisfied\"\n        future_modifications: \"Future modifications will be more serene\"\n        kitchen_functional: \"And his kitchen is perfectly functional!\"\n        thank_you: \"Thank you\"\nchalkboard: false\nauthor: <a href=\"https://arthurdata.github.io/rencontresR2025\" target=\"_blank\">🔗 arthurdata.github.io/rencontresR2025</a>\ninclude-before-body: assets/ground.html\ndate: last-modified\nrevealjs-plugins:\n  - i18n\n---\n\n\n\n\n# {{< i18n-key \"hello\" >}}\n\n# {{< i18n-key \"twoyearsago\" >}}\n\n{{< i18n-key \"during_r_meetings\" >}} <a href=\"https://www.youtube.com/watch?v=iWD_cLdmLUI&t=81s\" target=\"_blank\">🔗 Rencontres R 2023...</a>\n\n## {{< i18n-key \"pierrot_title\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {.fragment .fade-right}\n\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n\n\n:::\n:::\n\n::: {.column width=\"55%\"}\n::: {.fragment .fade-left}\n### {{< i18n-key \"meeting_pierrot\" >}}\n:::\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"wanted_kitchen\" >}}\n\n\n\n\n\n:::\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"shiny_for_client\" >}}\n\n\n\n\n\n:::\n:::\n::::\n\n## {{< i18n-key \"pierrot_title\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"revelation\" >}}\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"importance_mockup\" >}} \n\n\n\n\n\n\n- {{< i18n-key \"kitchen_design\" >}}\n- {{< i18n-key \"shiny_realization\" >}}\n:::\n:::\n::::\n\n## {{< i18n-key \"pierrot_title\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"two_years_later\" >}}\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"swedish_store\" >}}\n\n\n{{< i18n-key \"bought_everything\" >}}\n\n\n\n\n\n:::\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"mockup_validated\" >}}\n\n\n{{< i18n-key \"ready_to_dev\" >}}\n\n\n\n\n\n:::\n:::\n::::\n\n## {{< i18n-key \"pierrot_title\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"production_time\" >}}\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"assemble_kitchen\" >}}\n\n\n\n\n\n\n- {{< i18n-key \"assemble_furniture\" >}}\n- {{< i18n-key \"be_careful\" >}}\n:::\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"and_especially\" >}}\n\n\n\n\n\n:::\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"quality_assurance\" >}}\n\n\n\n\n\n:::\n:::\n::::\n\n# {{< i18n-key \"mockup_plan\" >}}\n\n# {{< i18n-key \"and_realization\" >}}\n\n## {{< i18n-key \"pierrot_title\" >}}\n\n:::: {.columns}\n::: {.column width=\"25%\"}\n:::\n\n::: {.column width=\"75%\"}\n### {{< i18n-key \"pierrot_fears_title\" >}}\n\n- {{< i18n-key \"poorly_assembled\" >}}\n- {{< i18n-key \"not_robust\" >}}\n- {{< i18n-key \"etc\" >}}\n:::\n::::\n\n## {{< i18n-key \"pierrot_fears_title\" >}}\n\n::: {.r-stack}\n![](assets/failed1.webp){.fragment width=\"650\" height=\"600\"}\n\n![](assets/failed2.webp){.fragment width=\"650\" height=\"600\"}\n\n![](assets/failed3.webp){.fragment width=\"650\" height=\"600\"}\n:::\n\n## {{< i18n-key \"pierrot_title\" >}}\n\n:::: {.columns}\n::: {.column width=\"25%\"}\n:::\n\n::: {.column width=\"75%\"}\n### {{< i18n-key \"reassured\" >}}\n\n\n\n\n{{< i18n-key \"seller_assures\" >}}\n\n\n\n\n\n\n- {{< i18n-key \"material_tested\" >}}\n\n- {{< i18n-key \"design_tool\" >}}\n:::\n::::\n\n## {{< i18n-key \"pierrot_title\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"new_revelation\" >}}\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"what_if_tests\" >}}\n\n\n\n\n\n:::\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"tests_allow\" >}}\n\n\n\n\n\n\n- {{< i18n-key \"validate_progressively\" >}}\n\n- {{< i18n-key \"ensure_no_breaks\" >}}\n\n- {{< i18n-key \"increase_robustness\" >}}\n:::\n\n:::\n::::\n\n# {{< i18n-key \"tests_in_shiny\" >}}\n\n# {{< i18n-key \"unit_tests\" >}}\n\n_{{< i18n-key \"unit_tests_subtitle\" >}}_\n\n## {{< i18n-key \"unit_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/unit_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"test_drawer\" >}}\n\n\n\n\n{{< i18n-key \"unit_tests_description\" >}}\n\n\n\n\n\n\n::: {.fragment .fade-left}\n- {{< i18n-key \"verify_function\" >}}\n- {{< i18n-key \"ensure_errors\" >}}\n- {{< i18n-key \"test_behavior\" >}}\n:::\n:::\n::::\n\n## {{< i18n-key \"unit_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/testunitaire.png)\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"test_drawer\" >}}\n\n\n\n\n{{< i18n-key \"test_individually\" >}}\n\n\n\n\n\n:::\n::::\n\n## {{< i18n-key \"unit_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/testunitaire.png)\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"good_news\" >}}\n\n\n\n\n{{< i18n-key \"followed_tutorial\" >}}\n\n\n{{< i18n-key \"shiny_is_package\" >}}\n\n\n\n\n\n:::\n::::\n\n## {{< i18n-key \"unit_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```\nmyShinyApp/\n├── DESCRIPTION\n├── NAMESPACE\n├── app.R\n├── R/\n│   ├── app_ui.R\n│   ├── app_server.R\n│   └── run_app.R\n├── tests/\n│   ├── testthat/\n│   │   ├── test-calculate_average.R\n│   │   ├── test-golem-recommended.R\n│   │   └── ...\n│   └── testthat.R\n```\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"create_test_structure\" >}}\n\n\n\n\n{{< i18n-key \"create_structure_text\" >}}\n\n\n\n\n\n\n- `golem::use_recommended_tests()`\n\n- `usethis::use_test(\"calculate_average\")`\n:::\n::::\n\n## {{< i18n-key \"unit_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_average <- function(values) {\n  if (!is.numeric(values)) {\n    stop(\"values must be numeric\")\n  }\n  if (length(values) == 0) {\n    return(0)\n  }\n  sum(values) / length(values)\n}\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"calculate_average works\", {\n  # Test with numeric values\n  expect_equal(\n    object = calculate_average(c(10, 20, 30)), \n    expected = 20\n  )\n  \n  # Test with empty vector\n  expect_equal(\n    object = calculate_average(0), \n    expected = 0\n  )\n  \n  # Test with non-numeric input\n  expect_error(\n    object = calculate_average(c(\"a\", \"b\")), \n    \"values must be numeric\"\n  )\n})\n```\n:::\n\n\n\n:::\n::::\n\n## {{< i18n-key \"unit_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"first_step\" >}}\n\n\n\n\n{{< i18n-key \"first_step_text\" >}}\n\n\n\n\n\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"however_not_direct\" >}}\n\n\n\n\n\n:::\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"secured_business_logic\" >}}\n\n\n\n\n\n:::\n:::\n::::\n\n# {{< i18n-key \"integration_tests\" >}}\n\n_{{< i18n-key \"integration_subtitle\" >}}_\n\n## {{< i18n-key \"integration_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/inte_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"assemble_furniture_together\" >}}\n\n\n\n\n{{< i18n-key \"integration_description\" >}}\n\n\n\n\n\n\n::: {.fragment .fade-left}\n- {{< i18n-key \"test_function_integration\" >}}\n\n- {{< i18n-key \"ensure_modules_react\" >}}\n\n- {{< i18n-key \"verify_reactive_flows\" >}}\n:::\n:::\n::::\n\n## {{< i18n-key \"integration_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\\ \n\n\\ \n\n![](assets/test_usage.png)\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"assemble_furniture_together\" >}}\n\n\n\n\n{{< i18n-key \"integration_difference\" >}}\n\n\n\n\n\n:::\n::::\n\n## {{< i18n-key \"integration_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp_ui <- function(request) {\n  fluidPage(\n    numericInput(\n      inputId = \"num1\",\n      label = \"First value\",\n      value = 10\n    ),\n    numericInput(\n      inputId = \"num2\",\n      label = \"Second value\",\n      value = 10\n    ),\n    ...\n    actionButton(\n      inputId = \"go\",\n      label = \"Calculate!\"\n    )\n  )\n}\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n![](assets/app_inte.png){width=50%}\n:::\n::::\n\n## {{< i18n-key \"integration_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp_ui <- function(request) {\n  fluidPage(\n    numericInput(\n      inputId = \"num1\",\n      label = \"First value\",\n      value = 10\n    ),\n    numericInput(\n      inputId = \"num2\",\n      label = \"Second value\",\n      value = 10\n    ),\n    ...\n    actionButton(\n      inputId = \"go\",\n      label = \"Calculate!\"\n    )\n  )\n}\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp_server <- function(input, output, session) {\n\n  rv <- reactiveValues()\n\n  observeEvent(input$go, {\n    rv$avg <- calculate_average(\n      values = c(\n        input$num1,\n        input$num2,\n        input$num3,\n        input$num4\n      )\n    )\n  })\n}\n```\n:::\n\n\n\n:::\n::::\n\n\n## {{< i18n-key \"integration_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntestServer(app_server, {\n  session$setInputs(num1 = 5)\n  session$setInputs(num2 = 5)\n  session$setInputs(num3 = 5)\n  session$setInputs(num4 = 5)\n  session$setInputs(go = 1)\n\n  expect_equal(\n    object = rv$avg, \n    expected = 5\n  )\n\n  session$setInputs(num1 = 10)\n  session$setInputs(num2 = 20)\n  session$setInputs(num3 = 30)\n  session$setInputs(num4 = 12)\n  session$setInputs(go = 2)\n\n  expect_equal(\n    object = rv$avg,\n    expected = 18\n  )\n})\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp_server <- function(input, output, session) {\n\n  rv <- reactiveValues()\n\n  observeEvent(input$go, {\n    rv$avg <- calculate_average(\n      values = c(\n        input$num1,\n        input$num2,\n        input$num3,\n        input$num4\n      )\n    )\n  })\n}\n```\n:::\n\n\n\n:::\n::::\n\n## {{< i18n-key \"integration_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests2.png)\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"second_step\" >}}\n\n\n\n\n{{< i18n-key \"second_step_text\" >}}\n\n\n\n\n\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"secured_functioning\" >}}\n\n\n\n\n\n:::\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"tests_remain_programmatic\" >}}\n\n\n\n\n\n:::\n:::\n::::\n\n# {{< i18n-key \"e2e_tests\" >}}\n\n_{{< i18n-key \"e2e_subtitle\" >}}_\n\n## {{< i18n-key \"e2e_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"cook_real_meal\" >}}\n\n\n\n\n{{< i18n-key \"e2e_description\" >}}\n\n\n\n\n\n\n::: {.fragment .fade-left}\n- {{< i18n-key \"simulate_user_interactions\" >}}\n\n- {{< i18n-key \"test_real_browser\" >}}\n\n- {{< i18n-key \"verify_complete_ux\" >}}\n:::\n:::\n::::\n\n## {{< i18n-key \"e2e_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"simulate_user_browser\" >}}\n\n\n\n\n{{< i18n-key \"use_playwright\" >}}\n\n\n\n\n\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"but_r_developer\" >}}\n\n\n\n\n\n\n<a href=\"https://github.com/ThinkR-open/pw\" target=\"_blank\">🔗 github.com/ThinkR-open/pw</a>\n:::\n:::\n::::\n\n## {{< i18n-key \"e2e_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"65%\"}\n![](assets/signature-r.png)\n:::\n\n::: {.column width=\"35%\"}\n### {{< i18n-key \"simulate_user_browser\" >}}\n\n<a href=\"https://connect.thinkr.fr/signature-r/\" target=\"_blank\">🔗 connect.thinkr.fr/signature-r/</a>\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"pw_init\" >}}\n\n\n{{< i18n-key \"then_devtools\" >}}\n\n\n\n\n\n:::\n:::\n::::\n\n\n## {{< i18n-key \"e2e_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n![](assets/tests_e2e.gif)\n:::\n\n::: {.column width=\"30%\"}\n### {{< i18n-key \"simulate_user_browser\" >}}\n\n\n\n\n{{< i18n-key \"very_fast\" >}}\n\n\n{{< i18n-key \"multiple_browsers\" >}}\n\n\n\n\n\n:::\n::::\n\n\n## {{< i18n-key \"e2e_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n![](assets/tests_e2e-2.gif)\n:::\n\n::: {.column width=\"30%\"}\n### {{< i18n-key \"simulate_user_browser\" >}}\n\n\n\n\n{{< i18n-key \"slow_down_trace\" >}}\n\n\n\n\n\n:::\n::::\n\n## {{< i18n-key \"e2e_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n\n\n\n::: {.cell}\n\n```{.js .cell-code}\nimport { test, expect } from '@playwright/test';\n\ntest('Fill signature is working', async ({ page }) => {\n  await page.goto('http://localhost:3000/');\n  await expect(page.getByTestId(\"appName\")).toBeVisible();\n\n  await expect(page.getByTestId('firstname')).toBeVisible();\n  await expect(page.getByPlaceholder('John')).toBeEmpty();\n  await page.getByPlaceholder('John').click();\n  await page.getByPlaceholder('John').fill('Arthur');\n  await expect(page.getByTestId('signature-names')).toMatchAriaSnapshot(`- 'cell \"Arthur {{lastname}}\"'`);\n\n  await page.getByPlaceholder('Doe').fill('Bréant');\n  await expect(page.getByTestId('signature-names')).toMatchAriaSnapshot(`- 'cell \"Arthur Bréant\"'`);\n\n  await page.getByRole('button', { name: 'copy fa-solid icon Copy to' }).click();\n  await expect(page.getByText('×Paste the signature in your')).toBeVisible();\n});\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"30%\"}\n### {{< i18n-key \"simulate_user_browser\" >}}\n\n\n\n\n{{< i18n-key \"advantage_generate\" >}}\n\n\n\n\n\n:::\n::::\n\n## {{< i18n-key \"e2e_tests\" >}}\n\n![](assets/e2e_generator.gif){width=\"100%\"}\n\n## {{< i18n-key \"e2e_tests\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests3.png)\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"final_step\" >}}\n\n\n\n\n{{< i18n-key \"final_step_text\" >}}\n\n\n\n\n\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"secured_complete\" >}}\n\n\n\n\n\n:::\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"e2e_ci\" >}}\n\n\n\n\n\n:::\n:::\n::::\n\n## {{< i18n-key \"tests_in_shiny\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"perfect_kitchen\" >}}\n\n\n::: {.fragment .fade-left}\n**{{< i18n-key \"unit_tests\" >}}**\n\n- {{< i18n-key \"unit_tests_functions\" >}}\n:::\n\n::: {.fragment .fade-left}\n**{{< i18n-key \"integration_tests\" >}}**\n\n- {{< i18n-key \"integration_reactive_flows\" >}}\n:::\n\n::: {.fragment .fade-left}\n**{{< i18n-key \"e2e_tests\" >}}**\n\n- {{< i18n-key \"e2e_user_journeys\" >}}\n:::\n:::\n::::\n\n## {{< i18n-key \"pierrot_kitchen\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {.fragment .fade-right}\n\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n\n\n:::\n:::\n\n::: {.column width=\"55%\"}\n::: {.fragment .fade-left}\n### {{< i18n-key \"final_result\" >}}\n\n\n\n\n{{< i18n-key \"thanks_to_strategy\" >}}\n\n\n\n\n\n:::\n\n::: {.fragment .fade-left}\n- {{< i18n-key \"delivered_robust\" >}}\n\n- {{< i18n-key \"client_satisfied\" >}}\n\n- {{< i18n-key \"future_modifications\" >}}\n:::\n\n::: {.fragment .fade-left}\n\n\n\n{{< i18n-key \"kitchen_functional\" >}}\n\n\n\n\n\n:::\n:::\n::::\n\n## {{< i18n-key \"pierrot_kitchen\" >}}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\n\n\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n\n\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n### {{< i18n-key \"thank_you\" >}}\n\n<a href=\"https://arthurdata.github.io/rencontresR2025\" target=\"_blank\">🔗 arthurdata.github.io/rencontresR2025</a>\n:::\n::::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}