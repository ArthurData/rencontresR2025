{"title":"Tester une application Shiny","markdown":{"yaml":{"title":"Tester une application Shiny","subtitle":"Méthodologie et outils pratiques","format":{"thinkridentity-revealjs":{"theme":"custom.scss","slideNumber":true}},"chalkboard":false,"author":"arthurdata.github.io/rencontresR2025","include-before-body":"assets/ground.html","date":"last-modified"},"headingText":"Bonjour","containsRefs":false,"markdown":"\n\n\n# Il y a deux ans...\n\nLors des Rencontres R 2023...\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {.fragment .fade-right}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n:::\n\n::: {.column width=\"55%\"}\n::: {.fragment .fade-left}\n### Rencontre de Pierrot\n:::\n\n::: {.fragment .fade-left}\nIl voulait refaire sa cuisine\n:::\n\n::: {.fragment .fade-left}\nIl devait produire une application Shiny pour un client\n:::\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n\n::: {.column width=\"55%\"}\n### Il avait alors eu une <span class=\"relevant\">révélation</span>\n\n::: {.fragment .fade-left}\nL'importance d'une maquette pour : \n\n- La conception de sa cuisine\n- La réalisation de l'application Shiny\n:::\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n\n::: {.column width=\"55%\"}\n### 2 ans après... la suite\n\n::: {.fragment .fade-left}\nSuite à sa visite dans cette grande enseigne suédoise :\n\n- Il a tout acheté : les meubles, les outils, _etc..._\n:::\n\n::: {.fragment .fade-left}\nLa maquette est validée avec son client :\n\n- Il est prêt à se lancer dans le dev\n:::\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n\n::: {.column width=\"55%\"}\n### Voici venu le temps de la <span class=\"relevant\">production</span>\n\n::: {.fragment .fade-left}\nPierrot va devoir monter sa cuisine :\n\n- Assembler les meubles, fixer, visser, _etc..._\n- Faire attention à ne rien casser\n:::\n\n::: {.fragment .fade-left}\nEt surtout :\n:::\n\n::: {.fragment .fade-left}\nS'assurer une qualité de montage suffisante pour les années à venir\n:::\n:::\n::::\n\n# Il y a le plan de la maquette ...\n\n# ... et la réalisation\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"25%\"}\n:::\n\n::: {.column width=\"75%\"}\n### Les craintes de Pierrot...\n\n- Une cuisine mal montée,\n- Une cuisine pas robuste,\n- _etc..._\n:::\n::::\n\n## Les craintes de Pierrot... \n\n::: {.r-stack}\n![](assets/failed1.webp){.fragment width=\"650\" height=\"600\"}\n\n![](assets/failed2.webp){.fragment width=\"650\" height=\"600\"}\n\n![](assets/failed3.webp){.fragment width=\"650\" height=\"600\"}\n:::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"25%\"}\n:::\n\n::: {.column width=\"75%\"}\n### Que Pierrot soit rassuré\n\nLe vendeur lui assure que  :\n\n- **Le matériel est testé** : les vis, les placards, _etc..._ sont soumis à des tests de charge\n\n- **L'outil de conception** montre les erreurs éventuelles\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n\n::: {.column width=\"55%\"}\n### C'est une nouvelle <span class=\"relevant\">révélation</span>\n\n::: {.fragment .fade-left}\nEt si Pierrot utilisait des tests pour l'application Shiny de son client ?\n:::\n\n::: {.fragment .fade-left}\nFaire des tests dans son application Shiny va lui permettre de : \n\n- Valider progressivement son code\n\n- S'assurer de ne rien casser en modifiant et/ou en ajoutant du code\n\n- Augmenter la robustesse de l'application\n:::\n\n:::\n::::\n\n# Les tests dans Shiny\n\n# Les tests unitaires\n\n_Comment s'assurer que chaque tiroir s'ouvre <br> correctement avant de l'installer dans la cuisine..._\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/unit_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Tester un tiroir individuellement\n\nComme vérifier qu'un tiroir s'ouvre et se ferme correctement, les tests unitaires dans Shiny permettent de :\n\n::: {.fragment .fade-left}\n- Vérifier qu'une fonction retourne la bonne valeur\n- S'assurer que les erreurs sont correctement gérées\n- Tester le comportement d'une fonction avec différents inputs\n:::\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/testunitaire.png)\n:::\n\n::: {.column width=\"55%\"}\n### Tester un tiroir individuellement\n\nPierrot va tester les différentes sorties d’une fonction, de manière indépendante des autres fonctions.\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/testunitaire.png)\n:::\n\n::: {.column width=\"55%\"}\n### La bonne nouvelle\n\nPierrot a suivi le tutoriel des <span class=\"relevant\">#RR25</span> de lundi matin sur `{Golem}` ! \n\nSon application Shiny est donc un <span class=\"relevant\">package</span>, ce qui va faciliter la création des tests unitaires.\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```\nmyShinyApp/\n├── DESCRIPTION\n├── NAMESPACE\n├── app.R\n├── R/\n│   ├── app_ui.R\n│   ├── app_server.R\n│   └── run_app.R\n├── tests/\n│   ├── testthat/\n│   │   ├── test-calculate_average.R\n│   │   ├── test-golem-recommended.R\n│   │   └── ...\n│   └── testthat.R\n```\n:::\n\n::: {.column width=\"55%\"}\n### Créer la structure de tests\n\nPour créer la structure de tests, Pierrot peut exécuter : \n\n- `golem::use_recommended_tests()`\n\n- `usethis::use_test(\"calculate_average\")`\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```{r}\n#| eval: false\n#| echo: true\ncalculate_average <- function(values) {\n  if (!is.numeric(values)) {\n    stop(\"values doit être numérique\")\n  }\n  if (length(values) == 0) {\n    return(0)\n  }\n  sum(values) / length(values)\n}\n```\n:::\n\n::: {.column width=\"55%\"}\n```{r}\n#| eval: false\n#| echo: true\ntest_that(\"calculate_average fonctionne\", {\n  # Test avec des valeurs numériques\n  expect_equal(\n    object = calculate_average(c(10, 20, 30)), \n    expected = 20\n  )\n  \n  # Test avec un vecteur vide\n  expect_equal(\n    object = calculate_average(numeric(0)), \n    expected = 0\n  )\n  \n  # Test avec input non-numérique\n  expect_error(\n    object = calculate_average(c(\"a\", \"b\")), \n    \"values doit être numérique\"\n  )\n})\n```\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Un premier pas\n\nIci, Pierrot vient tester une fonction dans son application. \n\n::: {.fragment .fade-left}\nEn revanche, il ne vient pas tester directement son application, les intéractions, _etc..._\n:::\n\n::: {.fragment .fade-left}\nMais il vient de <span class=\"relevant\">sécuriser la logique métier derrière son application</span>. \n:::\n:::\n::::\n\n# Les tests d'intégration\n\n_Les meubles de cuisine sont testés individuellement, <br> mais comment savoir s'ils fonctionneront ensemble ?_\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/inte_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Assembler les meubles entre eux\n\nComme vérifier que la porte du frigo ne butte pas contre le mur, les tests d'intégration permettent de :\n\n::: {.fragment .fade-left}\n- Tester l'emboitement des fonctions\n\n- S'assurer que les modules Shiny réagissent correctement\n\n- Vérifier le bon fonctionnement des flux réactifs\n:::\n:::\n::::\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\\ \n\n\\ \n\n![](assets/test_usage.png)\n:::\n\n::: {.column width=\"55%\"}\n### Assembler les meubles entre eux\n\nÀ la différence des tests unitaires, Pierrot va tester les interactions entre les fonctions.\n:::\n::::\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```{r}\n#| eval: false\n#| echo: true\napp_ui <- function(request) {\n  fluidPage(\n    numericInput(\n      inputId = \"num1\",\n      label = \"Premiere valeur\",\n      value = 10\n    ),\n    numericInput(\n      inputId = \"num2\",\n      label = \"Seconde valeur\",\n      value = 10\n    ),\n    ...\n    actionButton(\n      inputId = \"go\",\n      label = \"Calculer !\"\n    )\n  )\n}\n```\n:::\n\n::: {.column width=\"55%\"}\n![](assets/app_inte.png){width=80%}\n:::\n::::\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```{r}\n#| eval: false\n#| echo: true\napp_ui <- function(request) {\n  fluidPage(\n    numericInput(\n      inputId = \"num1\",\n      label = \"Premiere valeur\",\n      value = 10\n    ),\n    numericInput(\n      inputId = \"num2\",\n      label = \"Seconde valeur\",\n      value = 10\n    ),\n    ...\n    actionButton(\n      inputId = \"go\",\n      label = \"Calculer !\"\n    )\n  )\n}\n```\n:::\n\n::: {.column width=\"55%\"}\n```{r}\n#| eval: false\n#| echo: true\napp_server <- function(input, output, session) {\n\n  rv <- reactiveValues()\n\n  observeEvent(input$go, {\n    rv$avg <- calculate_average(\n      values = c(\n        input$num1,\n        input$num2,\n        input$num3,\n        input$num4\n      )\n    )\n  })\n}\n```\n:::\n::::\n\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```{r}\n#| eval: false\n#| echo: true\ntestServer(app_server, {\n  session$setInputs(num1 = 5)\n  session$setInputs(num2 = 5)\n  session$setInputs(num3 = 5)\n  session$setInputs(num4 = 5)\n  session$setInputs(go = 1)\n\n  expect_equal(\n    object = rv$avg, \n    expected = 5\n  )\n\n  session$setInputs(num1 = 10)\n  session$setInputs(num2 = 20)\n  session$setInputs(num3 = 30)\n  session$setInputs(num4 = 12)\n  session$setInputs(go = 2)\n\n  expect_equal(\n    object = rv$avg,\n    expected = 18\n  )\n})\n\n```\n:::\n\n::: {.column width=\"55%\"}\n```{r}\n#| eval: false\n#| echo: true\napp_server <- function(input, output, session) {\n\n  rv <- reactiveValues()\n\n  observeEvent(input$go, {\n    rv$avg <- calculate_average(\n      values = c(\n        input$num1,\n        input$num2,\n        input$num3,\n        input$num4\n      )\n    )\n  })\n}\n```\n:::\n::::\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests2.png)\n:::\n\n::: {.column width=\"55%\"}\n### Un second pas\n\nIci, Pierrot vient de tester les imbrications dans son application et notamment des interactions.\n\n::: {.fragment .fade-left}\nIl vient de <span class=\"relevant\">sécuriser le bon fonctionnement de son application</span>.\n:::\n\n::: {.fragment .fade-left}\nEn revanche, ces tests restent \"_programmatique_\" et ils ne simulent pas un vrai navigateur/utilisateur.\n:::\n:::\n::::\n\n# Les tests End-to-End\n\n_Nos meubles s'assemblent bien en théorie, <br>mais comment savoir si la cuisine sera vraiment utilisable par Pierrot ?_\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Cuisiner un vrai repas\n\nComme cuisiner réellement dans la cuisine pour s'assurer que tout est fonctionnel, les tests end-to-end permettent de :\n\n::: {.fragment .fade-left}\n- Simuler de vraies interactions utilisateur\n\n- Tester l'application dans un vrai navigateur\n\n- Vérifier l'expérience utilisateur complète\n:::\n:::\n::::\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Simuler un utilisateur dans un navigateur\n\nPour tester l'application dans un vrai navigateur, Pierrot va utiliser la librairie JS <span class=\"relevant\">Playwright</span>.\n\n::: {.fragment .fade-left}\nMais Pierrot est développeur R, il va donc utiliser le nouveau package R : `{pw}`\n\n<a href=\"https://github.com/ThinkR-open/pw\" target=\"_blank\">🔗 github.com/ThinkR-open/pw</a>\n:::\n:::\n::::\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n![](assets/signature-r.png)\n:::\n\n::: {.column width=\"30%\"}\n### Simuler un utilisateur dans un navigateur \n\n<a href=\"https://connect.thinkr.fr/signature-r/\" target=\"_blank\">🔗 thinkr.fr/signature-r</a>\n\n::: {.fragment .fade-left}\n`pw::pw_init()` pour initier la structure de tests pour <span class=\"relevant\">Playwright</span>\n\nPuis `devtools::test()` comme précédemment\n:::\n:::\n::::\n\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n![](assets/tests_e2e.gif)\n:::\n\n::: {.column width=\"30%\"}\n### Simuler un utilisateur dans un navigateur\n\nCa va très vite ... mais Playwright lance dans un navigateur l'application et simule un comportement utilisateur.\n\nFonctionne pour plusieurs navigateurs : Chromium, Firefix et Webkit.\n:::\n::::\n\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n![](assets/tests_e2e-2.gif)\n:::\n\n::: {.column width=\"30%\"}\n### Simuler un utilisateur dans un navigateur\n\nOn peut ralentir les tests en mode \"_trace_\"\n:::\n::::\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n```{js}\n#| eval: false\nimport { test, expect } from '@playwright/test';\n\ntest('Fill signature is working', async ({ page }) => {\n  await page.goto('http://localhost:3000/');\n  await expect(page.getByTestId(\"appName\")).toBeVisible();\n\n  await expect(page.getByTestId('firstname')).toBeVisible();\n  await expect(page.getByPlaceholder('John')).toBeEmpty();\n  await page.getByPlaceholder('John').click();\n  await page.getByPlaceholder('John').fill('Arthur');\n  await expect(page.getByTestId('signature-names')).toMatchAriaSnapshot(`- 'cell \"Arthur {{lastname}}\"'`);\n\n  await page.getByPlaceholder('Doe').fill('Bréant');\n  await expect(page.getByTestId('signature-names')).toMatchAriaSnapshot(`- 'cell \"Arthur Bréant\"'`);\n\n  await page.getByRole('button', { name: 'copy fa-solid icon Copy to' }).click();\n  await expect(page.getByText('×Paste the signature in your')).toBeVisible();\n});\n```\n:::\n\n::: {.column width=\"30%\"}\n### Simuler un utilisateur dans un navigateur\n\nAvantage : Playwright propose de générer le code automatiquement en cliquant dans l'application\n:::\n::::\n\n## Les tests End-to-End\n\n![](assets/e2e_generator.gif){width=\"100%\"}\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests3.png)\n:::\n\n::: {.column width=\"55%\"}\n### Un dernier pas\n\nIci, Pierrot vient de tester dans des conditions réelles son application.\n\n::: {.fragment .fade-left}\nIl vient de <span class=\"relevant\">sécuriser le bon fonctionnement de son application, tant sur la logique métier que sur la partie UI</span>.\n:::\n\n::: {.fragment .fade-left}\nLes tests End-to-End fonctionnent également dans la CI pour assurer à Pierrot un continuité dans son développement.\n:::\n:::\n::::\n\n## Les tests dans Shiny\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### La cuisine parfaite de Pierrot\n\n\n::: {.fragment .fade-left}\n**Tests unitaires**\n\n- Toutes les fonctions utilitaires et métiers\n:::\n\n::: {.fragment .fade-left}\n**Tests d'intégration**\n\n- Flux réactifs principaux\n:::\n\n::: {.fragment .fade-left}\n**Tests end-to-end**\n\n- Parcours utilisateur critiques ou complexes\n:::\n:::\n::::\n\n## La cuisine de Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {.fragment .fade-right}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n:::\n\n::: {.column width=\"55%\"}\n::: {.fragment .fade-left}\n### Le résultat final\n\nGrâce à sa stratégie de tests à trois niveaux :\n:::\n\n::: {.fragment .fade-left}\n- Pierrot a livré une application robuste\n\n- Son client est satisfait\n\n- Les modifications futures seront plus sereines\n:::\n\n::: {.fragment .fade-left}\nEt sa cuisine est parfaitement fonctionnelle !\n:::\n:::\n::::\n\n## La cuisine de Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n\n::: {.column width=\"55%\"}\n### Merci\n:::\n::::","srcMarkdownNoYaml":"\n\n# Bonjour\n\n# Il y a deux ans...\n\nLors des Rencontres R 2023...\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {.fragment .fade-right}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n:::\n\n::: {.column width=\"55%\"}\n::: {.fragment .fade-left}\n### Rencontre de Pierrot\n:::\n\n::: {.fragment .fade-left}\nIl voulait refaire sa cuisine\n:::\n\n::: {.fragment .fade-left}\nIl devait produire une application Shiny pour un client\n:::\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n\n::: {.column width=\"55%\"}\n### Il avait alors eu une <span class=\"relevant\">révélation</span>\n\n::: {.fragment .fade-left}\nL'importance d'une maquette pour : \n\n- La conception de sa cuisine\n- La réalisation de l'application Shiny\n:::\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n\n::: {.column width=\"55%\"}\n### 2 ans après... la suite\n\n::: {.fragment .fade-left}\nSuite à sa visite dans cette grande enseigne suédoise :\n\n- Il a tout acheté : les meubles, les outils, _etc..._\n:::\n\n::: {.fragment .fade-left}\nLa maquette est validée avec son client :\n\n- Il est prêt à se lancer dans le dev\n:::\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n\n::: {.column width=\"55%\"}\n### Voici venu le temps de la <span class=\"relevant\">production</span>\n\n::: {.fragment .fade-left}\nPierrot va devoir monter sa cuisine :\n\n- Assembler les meubles, fixer, visser, _etc..._\n- Faire attention à ne rien casser\n:::\n\n::: {.fragment .fade-left}\nEt surtout :\n:::\n\n::: {.fragment .fade-left}\nS'assurer une qualité de montage suffisante pour les années à venir\n:::\n:::\n::::\n\n# Il y a le plan de la maquette ...\n\n# ... et la réalisation\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"25%\"}\n:::\n\n::: {.column width=\"75%\"}\n### Les craintes de Pierrot...\n\n- Une cuisine mal montée,\n- Une cuisine pas robuste,\n- _etc..._\n:::\n::::\n\n## Les craintes de Pierrot... \n\n::: {.r-stack}\n![](assets/failed1.webp){.fragment width=\"650\" height=\"600\"}\n\n![](assets/failed2.webp){.fragment width=\"650\" height=\"600\"}\n\n![](assets/failed3.webp){.fragment width=\"650\" height=\"600\"}\n:::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"25%\"}\n:::\n\n::: {.column width=\"75%\"}\n### Que Pierrot soit rassuré\n\nLe vendeur lui assure que  :\n\n- **Le matériel est testé** : les vis, les placards, _etc..._ sont soumis à des tests de charge\n\n- **L'outil de conception** montre les erreurs éventuelles\n:::\n::::\n\n## Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n\n::: {.column width=\"55%\"}\n### C'est une nouvelle <span class=\"relevant\">révélation</span>\n\n::: {.fragment .fade-left}\nEt si Pierrot utilisait des tests pour l'application Shiny de son client ?\n:::\n\n::: {.fragment .fade-left}\nFaire des tests dans son application Shiny va lui permettre de : \n\n- Valider progressivement son code\n\n- S'assurer de ne rien casser en modifiant et/ou en ajoutant du code\n\n- Augmenter la robustesse de l'application\n:::\n\n:::\n::::\n\n# Les tests dans Shiny\n\n# Les tests unitaires\n\n_Comment s'assurer que chaque tiroir s'ouvre <br> correctement avant de l'installer dans la cuisine..._\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/unit_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Tester un tiroir individuellement\n\nComme vérifier qu'un tiroir s'ouvre et se ferme correctement, les tests unitaires dans Shiny permettent de :\n\n::: {.fragment .fade-left}\n- Vérifier qu'une fonction retourne la bonne valeur\n- S'assurer que les erreurs sont correctement gérées\n- Tester le comportement d'une fonction avec différents inputs\n:::\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/testunitaire.png)\n:::\n\n::: {.column width=\"55%\"}\n### Tester un tiroir individuellement\n\nPierrot va tester les différentes sorties d’une fonction, de manière indépendante des autres fonctions.\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/testunitaire.png)\n:::\n\n::: {.column width=\"55%\"}\n### La bonne nouvelle\n\nPierrot a suivi le tutoriel des <span class=\"relevant\">#RR25</span> de lundi matin sur `{Golem}` ! \n\nSon application Shiny est donc un <span class=\"relevant\">package</span>, ce qui va faciliter la création des tests unitaires.\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```\nmyShinyApp/\n├── DESCRIPTION\n├── NAMESPACE\n├── app.R\n├── R/\n│   ├── app_ui.R\n│   ├── app_server.R\n│   └── run_app.R\n├── tests/\n│   ├── testthat/\n│   │   ├── test-calculate_average.R\n│   │   ├── test-golem-recommended.R\n│   │   └── ...\n│   └── testthat.R\n```\n:::\n\n::: {.column width=\"55%\"}\n### Créer la structure de tests\n\nPour créer la structure de tests, Pierrot peut exécuter : \n\n- `golem::use_recommended_tests()`\n\n- `usethis::use_test(\"calculate_average\")`\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```{r}\n#| eval: false\n#| echo: true\ncalculate_average <- function(values) {\n  if (!is.numeric(values)) {\n    stop(\"values doit être numérique\")\n  }\n  if (length(values) == 0) {\n    return(0)\n  }\n  sum(values) / length(values)\n}\n```\n:::\n\n::: {.column width=\"55%\"}\n```{r}\n#| eval: false\n#| echo: true\ntest_that(\"calculate_average fonctionne\", {\n  # Test avec des valeurs numériques\n  expect_equal(\n    object = calculate_average(c(10, 20, 30)), \n    expected = 20\n  )\n  \n  # Test avec un vecteur vide\n  expect_equal(\n    object = calculate_average(numeric(0)), \n    expected = 0\n  )\n  \n  # Test avec input non-numérique\n  expect_error(\n    object = calculate_average(c(\"a\", \"b\")), \n    \"values doit être numérique\"\n  )\n})\n```\n:::\n::::\n\n## Les tests unitaires\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Un premier pas\n\nIci, Pierrot vient tester une fonction dans son application. \n\n::: {.fragment .fade-left}\nEn revanche, il ne vient pas tester directement son application, les intéractions, _etc..._\n:::\n\n::: {.fragment .fade-left}\nMais il vient de <span class=\"relevant\">sécuriser la logique métier derrière son application</span>. \n:::\n:::\n::::\n\n# Les tests d'intégration\n\n_Les meubles de cuisine sont testés individuellement, <br> mais comment savoir s'ils fonctionneront ensemble ?_\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/inte_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Assembler les meubles entre eux\n\nComme vérifier que la porte du frigo ne butte pas contre le mur, les tests d'intégration permettent de :\n\n::: {.fragment .fade-left}\n- Tester l'emboitement des fonctions\n\n- S'assurer que les modules Shiny réagissent correctement\n\n- Vérifier le bon fonctionnement des flux réactifs\n:::\n:::\n::::\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n\\ \n\n\\ \n\n![](assets/test_usage.png)\n:::\n\n::: {.column width=\"55%\"}\n### Assembler les meubles entre eux\n\nÀ la différence des tests unitaires, Pierrot va tester les interactions entre les fonctions.\n:::\n::::\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```{r}\n#| eval: false\n#| echo: true\napp_ui <- function(request) {\n  fluidPage(\n    numericInput(\n      inputId = \"num1\",\n      label = \"Premiere valeur\",\n      value = 10\n    ),\n    numericInput(\n      inputId = \"num2\",\n      label = \"Seconde valeur\",\n      value = 10\n    ),\n    ...\n    actionButton(\n      inputId = \"go\",\n      label = \"Calculer !\"\n    )\n  )\n}\n```\n:::\n\n::: {.column width=\"55%\"}\n![](assets/app_inte.png){width=80%}\n:::\n::::\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```{r}\n#| eval: false\n#| echo: true\napp_ui <- function(request) {\n  fluidPage(\n    numericInput(\n      inputId = \"num1\",\n      label = \"Premiere valeur\",\n      value = 10\n    ),\n    numericInput(\n      inputId = \"num2\",\n      label = \"Seconde valeur\",\n      value = 10\n    ),\n    ...\n    actionButton(\n      inputId = \"go\",\n      label = \"Calculer !\"\n    )\n  )\n}\n```\n:::\n\n::: {.column width=\"55%\"}\n```{r}\n#| eval: false\n#| echo: true\napp_server <- function(input, output, session) {\n\n  rv <- reactiveValues()\n\n  observeEvent(input$go, {\n    rv$avg <- calculate_average(\n      values = c(\n        input$num1,\n        input$num2,\n        input$num3,\n        input$num4\n      )\n    )\n  })\n}\n```\n:::\n::::\n\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n```{r}\n#| eval: false\n#| echo: true\ntestServer(app_server, {\n  session$setInputs(num1 = 5)\n  session$setInputs(num2 = 5)\n  session$setInputs(num3 = 5)\n  session$setInputs(num4 = 5)\n  session$setInputs(go = 1)\n\n  expect_equal(\n    object = rv$avg, \n    expected = 5\n  )\n\n  session$setInputs(num1 = 10)\n  session$setInputs(num2 = 20)\n  session$setInputs(num3 = 30)\n  session$setInputs(num4 = 12)\n  session$setInputs(go = 2)\n\n  expect_equal(\n    object = rv$avg,\n    expected = 18\n  )\n})\n\n```\n:::\n\n::: {.column width=\"55%\"}\n```{r}\n#| eval: false\n#| echo: true\napp_server <- function(input, output, session) {\n\n  rv <- reactiveValues()\n\n  observeEvent(input$go, {\n    rv$avg <- calculate_average(\n      values = c(\n        input$num1,\n        input$num2,\n        input$num3,\n        input$num4\n      )\n    )\n  })\n}\n```\n:::\n::::\n\n## Les tests d'intégration\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests2.png)\n:::\n\n::: {.column width=\"55%\"}\n### Un second pas\n\nIci, Pierrot vient de tester les imbrications dans son application et notamment des interactions.\n\n::: {.fragment .fade-left}\nIl vient de <span class=\"relevant\">sécuriser le bon fonctionnement de son application</span>.\n:::\n\n::: {.fragment .fade-left}\nEn revanche, ces tests restent \"_programmatique_\" et ils ne simulent pas un vrai navigateur/utilisateur.\n:::\n:::\n::::\n\n# Les tests End-to-End\n\n_Nos meubles s'assemblent bien en théorie, <br>mais comment savoir si la cuisine sera vraiment utilisable par Pierrot ?_\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Cuisiner un vrai repas\n\nComme cuisiner réellement dans la cuisine pour s'assurer que tout est fonctionnel, les tests end-to-end permettent de :\n\n::: {.fragment .fade-left}\n- Simuler de vraies interactions utilisateur\n\n- Tester l'application dans un vrai navigateur\n\n- Vérifier l'expérience utilisateur complète\n:::\n:::\n::::\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### Simuler un utilisateur dans un navigateur\n\nPour tester l'application dans un vrai navigateur, Pierrot va utiliser la librairie JS <span class=\"relevant\">Playwright</span>.\n\n::: {.fragment .fade-left}\nMais Pierrot est développeur R, il va donc utiliser le nouveau package R : `{pw}`\n\n<a href=\"https://github.com/ThinkR-open/pw\" target=\"_blank\">🔗 github.com/ThinkR-open/pw</a>\n:::\n:::\n::::\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n![](assets/signature-r.png)\n:::\n\n::: {.column width=\"30%\"}\n### Simuler un utilisateur dans un navigateur \n\n<a href=\"https://connect.thinkr.fr/signature-r/\" target=\"_blank\">🔗 thinkr.fr/signature-r</a>\n\n::: {.fragment .fade-left}\n`pw::pw_init()` pour initier la structure de tests pour <span class=\"relevant\">Playwright</span>\n\nPuis `devtools::test()` comme précédemment\n:::\n:::\n::::\n\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n![](assets/tests_e2e.gif)\n:::\n\n::: {.column width=\"30%\"}\n### Simuler un utilisateur dans un navigateur\n\nCa va très vite ... mais Playwright lance dans un navigateur l'application et simule un comportement utilisateur.\n\nFonctionne pour plusieurs navigateurs : Chromium, Firefix et Webkit.\n:::\n::::\n\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n![](assets/tests_e2e-2.gif)\n:::\n\n::: {.column width=\"30%\"}\n### Simuler un utilisateur dans un navigateur\n\nOn peut ralentir les tests en mode \"_trace_\"\n:::\n::::\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n```{js}\n#| eval: false\nimport { test, expect } from '@playwright/test';\n\ntest('Fill signature is working', async ({ page }) => {\n  await page.goto('http://localhost:3000/');\n  await expect(page.getByTestId(\"appName\")).toBeVisible();\n\n  await expect(page.getByTestId('firstname')).toBeVisible();\n  await expect(page.getByPlaceholder('John')).toBeEmpty();\n  await page.getByPlaceholder('John').click();\n  await page.getByPlaceholder('John').fill('Arthur');\n  await expect(page.getByTestId('signature-names')).toMatchAriaSnapshot(`- 'cell \"Arthur {{lastname}}\"'`);\n\n  await page.getByPlaceholder('Doe').fill('Bréant');\n  await expect(page.getByTestId('signature-names')).toMatchAriaSnapshot(`- 'cell \"Arthur Bréant\"'`);\n\n  await page.getByRole('button', { name: 'copy fa-solid icon Copy to' }).click();\n  await expect(page.getByText('×Paste the signature in your')).toBeVisible();\n});\n```\n:::\n\n::: {.column width=\"30%\"}\n### Simuler un utilisateur dans un navigateur\n\nAvantage : Playwright propose de générer le code automatiquement en cliquant dans l'application\n:::\n::::\n\n## Les tests End-to-End\n\n![](assets/e2e_generator.gif){width=\"100%\"}\n\n## Les tests End-to-End\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/result_tests3.png)\n:::\n\n::: {.column width=\"55%\"}\n### Un dernier pas\n\nIci, Pierrot vient de tester dans des conditions réelles son application.\n\n::: {.fragment .fade-left}\nIl vient de <span class=\"relevant\">sécuriser le bon fonctionnement de son application, tant sur la logique métier que sur la partie UI</span>.\n:::\n\n::: {.fragment .fade-left}\nLes tests End-to-End fonctionnent également dans la CI pour assurer à Pierrot un continuité dans son développement.\n:::\n:::\n::::\n\n## Les tests dans Shiny\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n![](assets/e2e_tests.png)\n:::\n\n::: {.column width=\"55%\"}\n### La cuisine parfaite de Pierrot\n\n\n::: {.fragment .fade-left}\n**Tests unitaires**\n\n- Toutes les fonctions utilitaires et métiers\n:::\n\n::: {.fragment .fade-left}\n**Tests d'intégration**\n\n- Flux réactifs principaux\n:::\n\n::: {.fragment .fade-left}\n**Tests end-to-end**\n\n- Parcours utilisateur critiques ou complexes\n:::\n:::\n::::\n\n## La cuisine de Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {.fragment .fade-right}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n:::\n\n::: {.column width=\"55%\"}\n::: {.fragment .fade-left}\n### Le résultat final\n\nGrâce à sa stratégie de tests à trois niveaux :\n:::\n\n::: {.fragment .fade-left}\n- Pierrot a livré une application robuste\n\n- Son client est satisfait\n\n- Les modifications futures seront plus sereines\n:::\n\n::: {.fragment .fade-left}\nEt sa cuisine est parfaitement fonctionnelle !\n:::\n:::\n::::\n\n## La cuisine de Pierrot\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n{{< quarto-lottie src=https://lottie.host/5f2ed099-4737-471d-a199-96b7786d7c88/JhebxcrsLV.json >}}\n:::\n\n::: {.column width=\"55%\"}\n### Merci\n:::\n::::"},"formats":{"thinkridentity-revealjs":{"identifier":{"display-name":"RevealJS","target-format":"thinkridentity-revealjs","base-format":"revealjs","extension-name":"thinkridentity"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":[],"include-before-body":["assets/ground.html"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.5.57","auto-stretch":true,"menu":{"titleSelector":"h1","useTextContentForMissingTitles":false,"hideMissingTitles":true},"slideNumber":true,"theme":["default","_extensions/ThinkR-open/thinkridentity/thinkridentity.scss","custom.scss"],"logo":"_extensions/ThinkR-open/thinkridentity/logo.png","footer":"**<i class=\"las la-book\"></i> {{< meta title >}}** |\nRetrouvez nous sur <https://thinkr.fr>\n","title-slide-attributes":{"data-background-image":"_extensions/ThinkR-open/thinkridentity/background.png"},"code-annotations":"hover","chalkboard":false,"revealjs-plugins":[],"title":"Tester une application Shiny","subtitle":"Méthodologie et outils pratiques","author":"arthurdata.github.io/rencontresR2025","date":"last-modified"}}},"projectFormats":[]}